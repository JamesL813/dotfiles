#!/bin/zsh

# lf doc - https://godoc.org/github.com/gokcehan/lf
# lfrc example - https://github.com/gokcehan/lf/blob/master/etc/lfrc.example

# ========== General settings ==========
# interpreter for shell commands
set shell zsh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10
set icons
set drawbox
set incsearch
set smartcase
set ignorecase
set anchorfind
set findlen 2
set tabstop 4
set mouse
set previewer ~/.config/lf/pv.sh

# adjust coloumn width to terminal
%{{
	w=$COLUMNS
	if [ $w -le 80 ]; then
		lf -remote "send $id set ratios 1:2"
	elif [ $w -le 160 ]; then
		lf -remote "send $id set ratios 1:2:3"
	else
		lf -remote "send $id set ratios 1:2:4:5"
	fi
}}


# set terminal title to current working directory
cmd on-cd &{{
	printf "\033]0; $PWD\007" > /dev/tty
}}

# set previewer with env vars

# ========== Commands ==========

cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
        text/*|application/json|application/octet-stream) $EDITOR $fx;;
        *) for f in $fx; do open $f > /dev/null 2> /dev/null & done;;
    esac
}}


cmd mkdir %{{
  printf "Folder Name: "
  read ans
  mkdir -p $ans
}}


cmd mkfile %{{
  printf "File Name: "
  read ans
  touch $ans
}}

# Create a directory with the selected items
cmd new-folder-with-selection ${{
  set -f
  printf "Directory name: "
  read newd
  mkdir -- "$newd"
  mv -- $fx "$newd"
}}

cmd chmod ${{
  printf "\nMode Bits: "
  read ans
  for file in "$fx"
  do
    chmod $ans $file
  done
  lf -remote 'send reload'
}}

cmd extract ${{
  set -f
  case $f in
    *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
    *.tar.gz|*.tgz) tar xzvf $f;;
    *.tar.xz|*.txz) tar xJvf $f;;
    *.tar) tar xvf $f;;
    *.zip) unzip $f;;
    *.rar) unrar x $f;;
    *.7z) 7z x $f;;
    *) echo "Unsupported format";;
  esac
}}

cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd delete ${{
  set -f
  printf "\n$fx\n"
  printf "delete?[y/N]"
  read ans
  if [[ $ans == "y" ]]; then
    rm -rf $fx
  fi
}}

cmd trash %{{
  set -f
  printf "\n$fx\n"
  printf "trash?[y/N]"
  read ans
  if [[ $ans == "y" ]]; then
    trash -f $fx
  fi
}}

cmd select-all :unselect; invert

# Bulk rename on selected files or all the non-hidden files in the current directory if no selection
cmd bulk-rename ${{
  old="$(mktemp)"
  new="$(mktemp)"
  if [ -n "$fs" ]; then
    fs="$(basename $fs)"
  else
    fs="$(ls)"
  fi
  printf '%s\n' "$fs" >"$old"
  printf '%s\n' "$fs" >"$new"
  $EDITOR "$new"
  [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
  paste "$old" "$new" | while IFS= read -r names; do
    src="$(printf '%s' "$names" | cut -f1)"
    dst="$(printf '%s' "$names" | cut -f2)"
    if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
        continue
    fi
    mv -- "$src" "$dst"
  done
  rm -- "$old" "$new"
  lf -remote "send $id unselect"
}}

# Copy the file names (including extension) of the selections separated by \n
cmd copy-filename ${{
  names="$(echo $fx | tr ' ' '\n' | xargs -I{} basename {})"
  echo $names | tr ' ' '\n' | pbcopy
}}

# Copy the absolute paths of selections separated by \n
cmd copy-absolute-path ${{
  echo $fx | tr ' ' '\n' | pbcopy
}}

# ========== Mappings ==========

# Remove some defaults
map gh
map m

map <m-down> down # Mouse mappings
map <m-up> up

map ~ cd ~
map . set hidden!


map <enter> open
map R reload
map mf mkfile
map md mkdir
map D delete 
map E extract
map C clear
map R bulk-rename

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# copy the file names of the selections
map yn copy-filename
map yp copy-absolute-path

# Navigate among the parent directories
map [ push hkl
map ] push hjl


# Fast navigation
map Jh cd ~
map Jd cd ~/Documents
map JD cd ~/Downloads
map Jg cd ~/gitrepos
map Jp cd ~/projects
map J. cd ~/.config
map Jv cd ~/.config/nvim
map Jz cd ~/.config/zsh

